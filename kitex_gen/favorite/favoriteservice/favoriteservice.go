// Code generated by Kitex v0.4.4. DO NOT EDIT.

package favoriteservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	favorite "tiktok-server/kitex_gen/favorite"
)

func serviceInfo() *kitex.ServiceInfo {
	return favoriteServiceServiceInfo
}

var favoriteServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "FavoriteService"
	handlerType := (*favorite.FavoriteService)(nil)
	methods := map[string]kitex.MethodInfo{
		"ActionFavorite": kitex.NewMethodInfo(actionFavoriteHandler, newFavoriteServiceActionFavoriteArgs, newFavoriteServiceActionFavoriteResult, false),
		"ListFavorite":   kitex.NewMethodInfo(listFavoriteHandler, newFavoriteServiceListFavoriteArgs, newFavoriteServiceListFavoriteResult, false),
		"MCheckFavorite": kitex.NewMethodInfo(mCheckFavoriteHandler, newFavoriteServiceMCheckFavoriteArgs, newFavoriteServiceMCheckFavoriteResult, false),
		"MCountFavorite": kitex.NewMethodInfo(mCountFavoriteHandler, newFavoriteServiceMCountFavoriteArgs, newFavoriteServiceMCountFavoriteResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "favorite",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func actionFavoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteServiceActionFavoriteArgs)
	realResult := result.(*favorite.FavoriteServiceActionFavoriteResult)
	success, err := handler.(favorite.FavoriteService).ActionFavorite(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteServiceActionFavoriteArgs() interface{} {
	return favorite.NewFavoriteServiceActionFavoriteArgs()
}

func newFavoriteServiceActionFavoriteResult() interface{} {
	return favorite.NewFavoriteServiceActionFavoriteResult()
}

func listFavoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteServiceListFavoriteArgs)
	realResult := result.(*favorite.FavoriteServiceListFavoriteResult)
	success, err := handler.(favorite.FavoriteService).ListFavorite(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteServiceListFavoriteArgs() interface{} {
	return favorite.NewFavoriteServiceListFavoriteArgs()
}

func newFavoriteServiceListFavoriteResult() interface{} {
	return favorite.NewFavoriteServiceListFavoriteResult()
}

func mCheckFavoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteServiceMCheckFavoriteArgs)
	realResult := result.(*favorite.FavoriteServiceMCheckFavoriteResult)
	success, err := handler.(favorite.FavoriteService).MCheckFavorite(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteServiceMCheckFavoriteArgs() interface{} {
	return favorite.NewFavoriteServiceMCheckFavoriteArgs()
}

func newFavoriteServiceMCheckFavoriteResult() interface{} {
	return favorite.NewFavoriteServiceMCheckFavoriteResult()
}

func mCountFavoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteServiceMCountFavoriteArgs)
	realResult := result.(*favorite.FavoriteServiceMCountFavoriteResult)
	success, err := handler.(favorite.FavoriteService).MCountFavorite(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteServiceMCountFavoriteArgs() interface{} {
	return favorite.NewFavoriteServiceMCountFavoriteArgs()
}

func newFavoriteServiceMCountFavoriteResult() interface{} {
	return favorite.NewFavoriteServiceMCountFavoriteResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) ActionFavorite(ctx context.Context, req *favorite.FavoriteActionRequest) (r *favorite.FavoriteActionResponse, err error) {
	var _args favorite.FavoriteServiceActionFavoriteArgs
	_args.Req = req
	var _result favorite.FavoriteServiceActionFavoriteResult
	if err = p.c.Call(ctx, "ActionFavorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListFavorite(ctx context.Context, req *favorite.FavoriteListRequest) (r *favorite.FavoriteListResponse, err error) {
	var _args favorite.FavoriteServiceListFavoriteArgs
	_args.Req = req
	var _result favorite.FavoriteServiceListFavoriteResult
	if err = p.c.Call(ctx, "ListFavorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MCheckFavorite(ctx context.Context, req *favorite.MCheckFavoriteRequest) (r *favorite.MCheckFavoriteResponse, err error) {
	var _args favorite.FavoriteServiceMCheckFavoriteArgs
	_args.Req = req
	var _result favorite.FavoriteServiceMCheckFavoriteResult
	if err = p.c.Call(ctx, "MCheckFavorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MCountFavorite(ctx context.Context, req *favorite.MCountVideoFavoriteRequest) (r *favorite.MCountVideoFavoriteResponse, err error) {
	var _args favorite.FavoriteServiceMCountFavoriteArgs
	_args.Req = req
	var _result favorite.FavoriteServiceMCountFavoriteResult
	if err = p.c.Call(ctx, "MCountFavorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
